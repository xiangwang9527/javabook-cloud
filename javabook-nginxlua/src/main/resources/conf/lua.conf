server {

    listen 80;
    server_name _;

    location /request {
         default_type 'text/html';
         lua_code_cache on;
         set $a $host;
         content_by_lua_file conf/lua/request.lua;
         echo_after_body "ngx.var.a = $a";
     }

    location /response {
         default_type 'text/html';
         lua_code_cache on;
         content_by_lua_block {
                ngx.print("Hello ");
                ngx.flush();
                ngx.sleep(1);
                ngx.say("World from OpenResty");
                return ngx.exit(200);
            }
     }

    location /mysql {
       default_type 'text/html';
       lua_code_cache on;
       content_by_lua_file conf/lua/mysql.lua;
    }

    location /test1 {
    	 default_type 'text/html';
    	 echo_sleep 2;
    	 echo test1 : $arg_test;
    }

    location /test2 {
    	 default_type 'text/html';
    	 echo_sleep 2;
    	 echo test2 : $arg_test;
    }

    location /allexecute {
       default_type 'text/html';
       content_by_lua '
         local t1 = ngx.now()
         local r1 = ngx.location.capture("/test1", {args = ngx.req.get_uri_args()})
         local r2 = ngx.location.capture("/test2", {args = ngx.req.get_uri_args()})
         local t2 = ngx.now()
         ngx.print(r1.body, "<br/>", r2.body, "<br/>", tostring(t2 - t1))
       ';
    }

    location /concurrency {
      default_type 'text/html';
      content_by_lua '
         local t1 = ngx.now()
         local r1, r2 = ngx.location.capture_multi({
              {"/test1", {args = ngx.req.get_uri_args()}},
              {"/test2", {args = ngx.req.get_uri_args()}}
            })
         local t2 = ngx.now()
         ngx.print(r1.body, "<br/>", r2.body, "<br/>", tostring(t2 - t1))';
    }

    location /xiecheng {
        default_type 'text/html';
        content_by_lua '
            local t1 = ngx.now()
            local function get(uri, args)
                return ngx.location.capture(uri, args)
            end
            local thread1 = ngx.thread.spawn(get, "/test1", {args = ngx.req.get_uri_args()})
            local thread2 = ngx.thread.spawn(get, "/test2", {args = ngx.req.get_uri_args()})
            local ok1, r1 = ngx.thread.wait(thread1)
            local ok2, r2 = ngx.thread.wait(thread2)
            local t2 = ngx.now()
            ngx.print(r1.body, "<br/>", r2.body, "<br/>", tostring(t2 - t1))
        ';
     }

    location /xiecheng2 {
        default_type 'text/html';
        content_by_lua '
            local t1 = ngx.now()
            local function get(uri, args)
                return ngx.location.capture(uri, args)
            end
            local thread1 = ngx.thread.spawn(get, "/test1", {args = ngx.req.get_uri_args()})
            local thread2 = ngx.thread.spawn(get, "/test2", {args = ngx.req.get_uri_args()})
            local ok, r = ngx.thread.wait(thread1, thread2)
            local t2 = ngx.now()
            ngx.print(r.body, "<br/>", tostring(t2 - t1))
          ';
     }

     location /ccc {
        default_type 'text/html';
        content_by_lua '
            coco = coroutine.create(function (a, b)
            ngx.print("resume args : "..a..", "..b.." - ")
            yreturn = coroutine.yield()
            ngx.print ("</br>yreturn : "..yreturn.." - ")
        end)
        ngx.print(coroutine.resume(coco, 1, 2), "<br/>")
        ngx.print(coroutine.resume(coco, 3, 4), "<br/>")
        ngx.print("<br/>")
        ngx.print(coroutine.resume(coco, 5, 6))
        ngx.print("<br/>")';
     }
}
